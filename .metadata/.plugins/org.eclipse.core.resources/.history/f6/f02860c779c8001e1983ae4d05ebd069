package com.example.myfirstwebapp.todo;

import java.time.LocalDate;
import java.util.List;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;

import jakarta.validation.Valid;

@Controller
@SessionAttributes("name")
public class TodoControllerJpa {
	private TodoService todoService;
	
	private TodoRepository todoRepository;

	public TodoControllerJpa(TodoService todoService) {
		super();
		this.todoService = todoService;
	}

	@GetMapping("todo-list")
	public String findTodos(ModelMap model) {
		String username = getLoggedUsername(model);
		List<Todo> todolist = todoRepository.findByUsername(username);
		model.addAttribute("todolist", todolist);
		return "todoList";
	}

	@GetMapping("add-todo")
	public String showNewTodoPage(ModelMap model) {
		String username = getLoggedUsername(model);
		Todo todo = new Todo(0, username, "", LocalDate.now(), false);
		model.addAttribute("todo", todo);
		return "toDo";
	}

	@PostMapping("add-todo")
	public String addNewTodoPage(ModelMap model, @Valid Todo todo, BindingResult result) {
		if (result.hasErrors())
			return "toDo";
		String username = getLoggedUsername(model);
		todo.setUserName(username);
		todoRepository.save(todo);
//		todoService.addTask(username, todo.getTaskName(), todo.getDate(), todo.isTaskStatus());
		return "redirect:todo-list";
	}

	@GetMapping("delete-todo")
	public String deleteTodo(@RequestParam int id) {
		todoRepository.deleteById(id);
		return "redirect:todo-list";
	}

	@GetMapping("update-todo")
	public String showUpdateTodoPage(@RequestParam int id, ModelMap model) {
		Todo todo = todoService.findById(id);
		model.addAttribute("todo", todo);
		return "toDo";
	}

	@PostMapping("update-todo")
	public String updateTodo(@Valid Todo todo, BindingResult result) {
		if (result.hasErrors())
			return "toDo";
		todoService.updateTodo(todo);
		return "redirect:todo-list";
	}
	
	private String getLoggedUsername(ModelMap model) {
		Authentication authentication = 
				SecurityContextHolder.getContext().getAuthentication();
		return authentication.getName();
	}
}
