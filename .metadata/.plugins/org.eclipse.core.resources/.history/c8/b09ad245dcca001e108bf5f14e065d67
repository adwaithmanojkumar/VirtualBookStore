package com.example.rest.webservices.restfulwebservices.user;

import java.net.URI;
import java.util.List;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;

import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.example.rest.webservices.restfulwebservices.jpa.UserJpaRepository;

import jakarta.validation.Valid;

@RestController
public class UserDaoJpaController {
	private UserJpaRepository userRepository;
	
	private UserDaoService service;

	public UserDaoJpaController(UserDaoService service,UserJpaRepository userRepository) {
		super();
		this.service = service;
		this.userRepository=userRepository;
	}

	@GetMapping("/jpa/users")
	public List<User> findAll() {
		return userRepository.findAll();
	}

	@GetMapping("/jpa/users/{id}")
	public EntityModel<User> findOne(@PathVariable int id) {
		User user = userRepository.findById(id).get();
		
		if(user==null) 
			throw new UserNotFoundException("id:"+id);
		
		EntityModel<User> entitymodel = EntityModel.of(user);
		
		WebMvcLinkBuilder linkbuilder = linkTo(methodOn(this.getClass()).findAll());
		entitymodel.add(linkbuilder.withRel("all-users"));
		
		return entitymodel;
	}

	@PostMapping("/jpa/users")
	public ResponseEntity<User> createUser(@Valid @RequestBody User user) {
		User savedUser = userRepository.save(user);

		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(savedUser.getId())
				.toUri();
		return ResponseEntity.created(location).build();
	}
	
	@DeleteMapping("/jpa/users/{id}")
	public void deleteById(@PathVariable int id) {
		userRepository.delete(user);
	}
}
