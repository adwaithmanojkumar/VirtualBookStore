package Dsa;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class ThreeSum {
	public static void main(String[] args) {
		int[] arr = {-1,-1,2,0,1};
//		System.out.println(tripletBrute(5, arr));
		System.out.println(tripletBetter(5, arr));
	}
	
	//Brute-Force
	//TC-> O(N^3 * log(no. of triplets)
	//SC-> 2*O(No. of triplets)
	public static List<List<Integer>> tripletBrute(int n,int[] arr) {
		Set<List<Integer>> st=new HashSet<>();
		for(int i=0;i<n;i++) {
			for(int j=i+1;j<n;j++) {
				for(int k=j+1;k<n;k++) {
					if(arr[i]+arr[j]+arr[k]==0) {
						List<Integer> temp=Arrays.asList(arr[i],arr[j],arr[k]);
						temp.sort(null);
						st.add(temp);
					}
				}
			}
		}
		List<List<Integer>> ans = new ArrayList<>(st);
		return ans;
	}
	
	//Better
	//TC-> O(N^2 * log(M)
	//SC-> O(N) + 2*O(No. of triplets)
	public static List<List<Integer>> tripletBetter(int n,int[] arr) {
		Set<List<Integer>> st=new HashSet<>();
		for(int i=0;i<n;i++) {
			Set<Integer> hashset = new HashSet<>();
			for(int j=i+1;j<n;j++) {
				int third = -(arr[i]+arr[j]);
				if(hashset.contains(third)) {
					List<Integer> temp=Arrays.asList(arr[i],arr[j],third);
					temp.sort(null);
					st.add(temp);
				}
				hashset.add(arr[j]);
			}
		}
		
		List<List<Integer>> ans = new ArrayList<>(st);
		return ans;
	}
	
	public static List<List<Integer>> tripletOptimal(int n,int[] arr) {
		Set<List<Integer>> st=new HashSet<>();
		for(int i=0;i<n;i++) {
			Set<Integer> hashset = new HashSet<>();
			for(int j=i+1;j<n;j++) {
				int third = -(arr[i]+arr[j]);
				if(hashset.contains(third)) {
					List<Integer> temp=Arrays.asList(arr[i],arr[j],third);
					temp.sort(null);
					st.add(temp);
				}
				hashset.add(arr[j]);
			}
		}
		
		List<List<Integer>> ans = new ArrayList<>(st);
		return ans;
	}
}
