package com.springprojects.virtualbookstore.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.ecommerce_website.model.Cart;
import com.springprojects.virtualbookstore.config.JwtProvider;
import com.springprojects.virtualbookstore.exception.UserException;
import com.springprojects.virtualbookstore.model.User;
import com.springprojects.virtualbookstore.repo.UserServiceRepo;
import com.springprojects.virtualbookstore.response.AuthResponse;
import com.springprojects.virtualbookstore.service.CustomUserServiceImplementation;

@RestController
@RequestMapping("/auth")
public class AuthController {
	private UserServiceRepo userRepo;
	private JwtProvider jwtProvider;
	private PasswordEncoder passwordEncoder;
	private CustomUserServiceImplementation customUserService;
	
	public AuthController(UserServiceRepo userRepo, JwtProvider jwtProvider, PasswordEncoder passwordEncoder,
			CustomUserServiceImplementation customUserService) {
		super();
		this.userRepo = userRepo;
		this.jwtProvider = jwtProvider;
		this.passwordEncoder = passwordEncoder;
		this.customUserService = customUserService;
	}
	
	@PostMapping("/signup")
	public ResponseEntity<AuthResponse> createUserHandler(@RequestBody User user) throws UserException {
		String email = user.getEmail();
		String password = user.getPassword();
		String firstName = user.getFirstName();
		String lastName = user.getLastName();
		
		User isEmailExist = userRepo.findByEmail(email);

		if (isEmailExist != null) {
			throw new UserException("Email is already used for another account");
		}

		User createdUser = new User();
		createdUser.setEmail(email);
		createdUser.setPassword(passwordEncoder.encode(password));
		createdUser.setFirstName(firstName);
		createdUser.setLastName(lastName);
		
		User savedUser = userRepo.save(createdUser);
		
//		System.out.println("User ID: " + savedUser.getId());
//		Cart cart = cartService.createCart(savedUser);
//		System.out.println(cart.getId());
//		System.out.println(cart.getUser().getId());
		
		
	}
}
